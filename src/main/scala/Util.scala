import java.io.File
import scala.collection.TraversableOnce

/** Miscellaneous utility functions. */
object Util {

  /** Joins collection elements with a separator */
  def join(parts : TraversableOnce[String], separator : String) : String = {
    if (parts.isEmpty)
      ""
    else
      parts.reduce(_ + separator +  _)
  }

  /** Joins collection elements without a separator */
  def join(parts : TraversableOnce[String]) : String = {
    join(parts, "")
  }

  /**
   * Measures how much time it takes to run the block.
   * From http://biercoff.com/easily-measuring-code-execution-time-in-scala/
   */
  def time[R](block: => R): R = {  
    val t0 = System.nanoTime()
    val result = block    // call-by-name
    val t1 = System.nanoTime()
    println("Elapsed time: " + (t1 - t0) / 1000000f + "ms")
    result
  }
  
  /**
   * Returns true if the first file is newer than the second one.
   * Example:
   *   if (isNewer(rawMaterialFile, autoGeneratedFile)) {
   *      createAutoGeneratedFileFromRawMaterial()
   *   }
   */
  def isNewer(fileName1 : String, fileName2 : String) : Boolean = {
     val file1 = new File(fileName1)
     val file2 = new File(fileName2)
     val firstIsNewer = file1.lastModified > file2.lastModified
     return !file2.exists() || firstIsNewer
  }
}

